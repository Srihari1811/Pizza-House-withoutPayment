const express = require('express');
const mongoose = require('mongoose');
const dotenv = require('dotenv');
const multer = require('multer');
const path = require('path');
const bodyParser = require('body-parser');
const cors = require('cors');
const Razorpay = require('razorpay');

// Initialize environment variables
dotenv.config();

// Connect to MongoDB
mongoose.connect(process.env.MONGO_URI)
  .then(() => console.log('MongoDB connected'))
  .catch(err => {
    console.error(`Error: ${err.message}`);
    process.exit(1);
  });

// Create Express app
const app = express(); 
const port = process.env.PORT || 5000;

// Middleware setup
app.use(cors());
app.use(express.json());
app.use('/uploads', express.static(path.join(__dirname, 'uploads')));

// Multer setup for file uploads
// Multer setup for file uploads
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, 'uploads/'); // Define the folder to store uploaded files
  },
  filename: (req, file, cb) => {
    cb(null, Date.now() + path.extname(file.originalname)); // Rename the file to include the timestamp
  },
});


const upload = multer({ dest: 'uploads/' }); 

// Category model
const categorySchema = new mongoose.Schema({
  name: { type: String, required: true },
  imageUrl: { type: String, required: true }
});

const Category = mongoose.model('Category', categorySchema);



const productSchema = new mongoose.Schema({
  name: { type: String, required: true },
  price: { type: Number, required: true },
  imageUrl: { type: String, required: true },
  category: { type: mongoose.Schema.Types.ObjectId, ref: 'Category', required: true },
});

const Product = mongoose.model('Product', productSchema);

module.exports = Product;

// Order model
const orderSchema = new mongoose.Schema({
  name: String,
  mobile: String,
  totalAmount: Number,
  products: Array,
  date: { type: Date, default: Date.now },
  status: { type: String, default: 'Undelivered' }
});

const Order = mongoose.model('Order', orderSchema);

// Admin model
const adminSchema = new mongoose.Schema({
  adminId: { type: String, required: true },
  password: { type: String, required: true },
});

const Admin = mongoose.model('Admin', adminSchema);

// Function to set initial admin credentials
async function setInitialAdminCredentials() {
  try {
    const adminExists = await Admin.findOne({ adminId: 'Admin' });
    if (!adminExists) {
      const newAdmin = new Admin({ adminId: 'Admin', password: 'Admin123' });
      await newAdmin.save();
      console.log('Admin credentials set successfully.');
    } else {
      console.log('Admin credentials already exist.');
    }
  } catch (error) {
    console.error('Error setting admin credentials:', error);
  }
}

// Function to validate admin credentials
async function validateAdminCredentials(adminId, password) {
  try {
    const admin = await Admin.findOne({ adminId, password });
    return !!admin;
  } catch (error) {
    console.error('Error validating admin credentials:', error);
    return false;
  }
}

// Routes
app.post('/validate-admin', async (req, res) => {
  const { adminId, password } = req.body;
  const isValid = await validateAdminCredentials(adminId, password);
  res.json({ isValid });
});

app.post('/submitOrder', async (req, res) => {
  const { name, mobile, amount, products } = req.body;

  try {
    const newOrder = new Order({
      name,
      mobile,
      totalAmount: amount,
      products
    });

    await newOrder.save();
    res.status(201).json({ message: 'Order saved successfully', order: newOrder });
  } catch (error) {
    res.status(500).json({ message: 'Failed to save order', error });
  }
});

app.get('/getOrders', async (req, res) => {
  try {
    const orders = await Order.find();
    res.status(200).json(orders);
  } catch (error) {
    res.status(500).json({ error: 'Failed to fetch orders.' });
  }
});

app.post('/updateOrderStatus/:orderId', async (req, res) => {
  const { orderId } = req.params;
  const { status } = req.body;

  if (status !== 'Delivered') {
    return res.status(400).json({ message: 'Invalid status' });
  }

  try {
    const order = await Order.findById(orderId);
    if (!order) {
      return res.status(404).json({ message: 'Order not found' });
    }

    if (order.status === 'Delivered') {
      return res.status(400).json({ message: 'Order is already delivered' });
    }

    order.status = status;
    await order.save();
    res.status(200).json({ message: 'Order status updated' });
  } catch (err) {
    res.status(500).json({ message: 'Failed to update status' });
  }
});

app.post('/addCategories', async (req, res) => {
  const { name, imageUrl } = req.body;

  if (!name || !imageUrl) {
    return res.status(400).json({ error: 'Name and image URL are required' });
  }

  try {
    const newCategory = new Category({ name, imageUrl });
    await newCategory.save();
    res.status(201).json({ message: 'Category added successfully', category: newCategory });
  } catch (error) {
    console.error('Failed to add category:', error);
    res.status(500).json({ error: 'Failed to add category' });
  }
});

app.get('/addcategories', async (req, res) => {
  try {
    const categories = await Category.find();
    res.status(200).json(categories);
  } catch (error) {
    console.error('Failed to fetch categories:', error);
    res.status(500).json({ error: 'Failed to fetch categories' });
  }
});


app.put('/updateCategory/:id', async (req, res) => {
  const { id } = req.params;
  const { name, imageUrl } = req.body;

  try {
    const updatedCategory = await Category.findByIdAndUpdate(
      id,
      { name, imageUrl },
      { new: true }
    );

    if (!updatedCategory) {
      return res.status(404).json({ message: 'Category not found' });
    }

    res.status(200).json({ message: 'Category updated successfully', category: updatedCategory });
  } catch (error) {
    console.error('Error updating category:', error);
    res.status(500).json({ message: 'Failed to update category' });
  }
});


app.delete('/deleteCategory/:id', async (req, res) => {
  const { id } = req.params;

  try {
    const deletedCategory = await Category.findByIdAndDelete(id);

    if (!deletedCategory) {
      return res.status(404).json({ message: 'Category not found' });
    }

    res.status(200).json({ message: 'Category removed successfully' });
  } catch (error) {
    console.error('Error removing category:', error);
    res.status(500).json({ message: 'Failed to remove category' });
  }
});





// Route to add a new product
app.post('/addProducts', upload.single('image'), async (req, res) => {
  try {
    const { name, price, category } = req.body;
    const imageUrl = req.body.imageUrl; // Get the image URL from the request body

    // Create a new product and save it to the database
    const newProduct = new Product({
      name,
      price,
      imageUrl,
      category,
    });

    await newProduct.save();
    res.status(201).json(newProduct);
  } catch (error) {
    console.error('Failed to add product:', error);
    res.status(500).json({ message: 'Failed to add product' });
  }
});

// Route to fetch all products
app.get('/addproducts', async (req, res) => {
  try {
    const products = await Product.find().populate('category');
    res.status(200).json(products);
  } catch (error) {
    console.error('Failed to fetch products:', error);
    res.status(500).json({ error: 'Failed to fetch products' });
  }
});

app.get('/addproducts/:categoryId', async (req, res) => {
  const { categoryId } = req.params;

  // Validate categoryId format (assuming itâ€™s an ObjectId)
  if (!mongoose.Types.ObjectId.isValid(categoryId)) {
    return res.status(400).json({ error: 'Invalid category ID format' });
  }

  try {
    // Find products by category ID
    const products = await Product.find({ category: categoryId });

    // Check if any products were found
    if (products.length === 0) {
      return res.status(404).json({ message: 'No products found for this category' });
    }

    res.status(200).json(products);
  } catch (error) {
    console.error('Failed to fetch products:', error);
    res.status(500).json({ error: 'Failed to fetch products' });
  }
});

app.put('/addproducts/:id', async (req, res) => {
  try {
    const productId = req.params.id;
    const updatedData = req.body;

    // Validate that updatedData contains necessary fields
    if (!updatedData.name || updatedData.price === undefined) {
      return res.status(400).json({ message: 'Product name and price are required' });
    }

    // Find and update the product
    const updatedProduct = await Product.findByIdAndUpdate(productId, updatedData, { new: true });

    if (!updatedProduct) {
      return res.status(404).json({ message: 'Product not found' });
    }

    res.json(updatedProduct);
  } catch (error) {
    console.error('Error updating product:', error);
    res.status(500).json({ message: 'Failed to update product' });
  }
});



app.delete('/addproducts/:productId', async (req, res) => {
  const { productId } = req.params;
  try {
    const result = await Product.findByIdAndDelete(productId);
    if (!result) {
      return res.status(404).json({ error: 'Product not found' });
    }
    res.status(200).json({ message: 'Product removed successfully' });
  } catch (error) {
    res.status(500).json({ error: 'Failed to delete product' });
  }
});



// Configure Razorpay SDK
const razorpay = new Razorpay({
  key_id: 'rzp_live_eHl1IKa1mogqyP',
  key_secret: '59ZVbFLT54EgMi9n7EtJh7cD'
});


app.post('/pay', async (req, res) => {
  const { amount } = req.body;

  try {
    const order = await razorpay.orders.create({
      amount: amount * 100, // amount in paise
      currency: 'INR',
      receipt: `${Date.now()}`,
      payment_capture: 1
    });

    res.json({ orderId: order.id });
  } catch (error) {
    res.status(500).json({ error: 'Failed to create order' });
  }
});

// Initialize admin credentials if needed
setInitialAdminCredentials();

app.listen(port, () => {
  console.log(`Server running on port ${port}`);
});
